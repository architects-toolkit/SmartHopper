name: Security Patch Release

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Security fix description'
        required: true
        type: string
      update_changelog:
        description: 'Update CHANGELOG.md with the security fix'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  issues: read
  pull-requests: write

jobs:
  create-security-patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0
          ref: main

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest release version
        id: latest-release
        uses: actions/github-script@v7.0.1
        with:
          script: |
            try {
              const latestRelease = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              // Remove 'v' prefix if present
              let version = latestRelease.data.tag_name;
              if (version.startsWith('v')) {
                version = version.substring(1);
              }
              
              console.log(`Latest release version: ${version}`);
              return version;
            } catch (error) {
              console.log('No releases found or error fetching latest release');
              console.log(error);
              return '';
            }
          result-encoding: string

      - name: Get current version from Solution.props
        id: current-version
        uses: ./.github/actions/version-tools
        with:
          task: get-version

      - name: Calculate new version
        id: calculate-version
        uses: ./.github/actions/version-tools/version-calculator
        with:
          version: ${{ steps.latest-release.outputs.result || steps.current-version.outputs.version }}
          increment: patch

      - name: Set branch name
        id: set-branch
        run: |
          echo "security_branch=security/patch-${{ steps.calculate-version.outputs.new-version }}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Check if branch exists
        id: check-branch
        run: |
          if git ls-remote --heads origin ${{ steps.set-branch.outputs.security_branch }} | grep -q ${{ steps.set-branch.outputs.security_branch }}; then
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create or update branch
        id: create-branch
        run: |
          if [[ "${{ steps.check-branch.outputs.branch_exists }}" == "true" ]]; then
            # Branch exists, fetch it and reset to match remote
            git fetch origin ${{ steps.set-branch.outputs.security_branch }}
            git checkout -B ${{ steps.set-branch.outputs.security_branch }} origin/${{ steps.set-branch.outputs.security_branch }}
            echo "Using existing branch: ${{ steps.set-branch.outputs.security_branch }}"
          else
            # Create new branch
            git checkout -b ${{ steps.set-branch.outputs.security_branch }}
            echo "Created new branch: ${{ steps.set-branch.outputs.security_branch }}"
          fi
        shell: bash

      - name: Update Solution.props with new version
        uses: ./.github/actions/version-tools
        with:
          task: update-version
          new-version: ${{ steps.calculate-version.outputs.new-version }}

      - name: Update badges
        uses: ./.github/actions/version-tools
        with:
          task: update-badge

      - name: Update CHANGELOG.md
        if: ${{ github.event.inputs.update_changelog == 'true' }}
        uses: ./.github/actions/version-tools/changelog-updater
        with:
          version: ${{ steps.calculate-version.outputs.new-version }}
          security-fix: true
          security-description: ${{ github.event.inputs.description }}

      - name: Commit and push changes
        id: commit-changes
        run: |
          git add Solution.props README.md CHANGELOG.md
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit, skipping PR creation"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            git commit -m "security: bump version to ${{ steps.calculate-version.outputs.new-version }} for security patch"
            
            # Force push to ensure we can update the branch if it exists
            git push --force origin ${{ steps.set-branch.outputs.security_branch }}
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Check milestones for version collision
        id: check-milestones
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const newVersion = '${{ steps.calculate-version.outputs.new-version }}';
            const major = '${{ steps.calculate-version.outputs.major }}';
            const minor = '${{ steps.calculate-version.outputs.minor }}';
            const updatedMilestones = [];
            
            for (const milestone of milestones.data) {
              // Check if milestone shares the same major.minor
              if (milestone.title.match(new RegExp(`^${major}\\.${minor}\\.\\d+(-[a-zA-Z0-9]+(\\.[0-9]+)?)?$`))) {
                // Parse milestone version
                const match = milestone.title.match(/^(\d+)\.(\d+)\.(\d+)(-[a-zA-Z0-9]+(\.[0-9]+)?)?$/);
                if (match) {
                  const milestoneMajor = match[1];
                  const milestoneMinor = match[2];
                  const milestonePatch = parseInt(match[3]);
                  const milestoneSuffix = match[4] || '';
                  
                  // If milestone patch is less than or equal to our new patch, increment it
                  if (milestonePatch <= parseInt('${{ steps.calculate-version.outputs.patch }}')) {
                    const newMilestonePatch = parseInt('${{ steps.calculate-version.outputs.patch }}') + 1;
                    const updatedMilestoneVersion = `${milestoneMajor}.${milestoneMinor}.${newMilestonePatch}${milestoneSuffix}`;
                    
                    // Update milestone title
                    await github.rest.issues.updateMilestone({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      milestone_number: milestone.number,
                      title: updatedMilestoneVersion
                    });
                    
                    updatedMilestones.push({
                      from: milestone.title,
                      to: updatedMilestoneVersion
                    });
                    
                    console.log(`Updated milestone ${milestone.title} to ${updatedMilestoneVersion}`);
                  }
                }
              }
            }
            
            return { updatedMilestones: updatedMilestones };

      - name: Check dev branch for version collision
        id: check-dev
        run: |
          # Fetch dev branch
          git fetch origin dev
          
          # Check if dev branch exists
          if git rev-parse --verify origin/dev >/dev/null 2>&1; then
            # Checkout dev branch
            git checkout origin/dev
            
            # Get version from dev branch
            DEV_VERSION=$(grep -oP '(?<=<SolutionVersion>)[^<]+' Solution.props)
            echo "Dev version: $DEV_VERSION"
            
            # Parse dev version components
            if [[ $DEV_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
              DEV_MAJOR="${BASH_REMATCH[1]}"
              DEV_MINOR="${BASH_REMATCH[2]}"
              DEV_PATCH="${BASH_REMATCH[3]}"
              DEV_SUFFIX="${BASH_REMATCH[4]}"
              
              # Check if dev version has same major.minor as our new version
              if [ "$DEV_MAJOR" == "${{ steps.calculate-version.outputs.major }}" ] && [ "$DEV_MINOR" == "${{ steps.calculate-version.outputs.minor }}" ]; then
                # Check if dev patch is less than or equal to our new patch
                if [ "$DEV_PATCH" -le "${{ steps.calculate-version.outputs.patch }}" ]; then
                  echo "DEV_COLLISION=true" >> $GITHUB_OUTPUT
                  
                  # Increment patch version to be one more than our new patch
                  NEW_PATCH="${{ steps.calculate-version.outputs.patch }}"
                  DEV_NEW_PATCH=$((NEW_PATCH + 1))
                  if [[ -n "$DEV_SUFFIX" ]]; then
                    DEV_NEW_VERSION="$DEV_MAJOR.$DEV_MINOR.$DEV_NEW_PATCH$DEV_SUFFIX"
                  else
                    DEV_NEW_VERSION="$DEV_MAJOR.$DEV_MINOR.$DEV_NEW_PATCH"
                  fi
                  
                  echo "New dev version: $DEV_NEW_VERSION"
                  echo "DEV_NEW_VERSION=$DEV_NEW_VERSION" >> $GITHUB_OUTPUT
                  echo "DEV_VERSION=$DEV_VERSION" >> $GITHUB_OUTPUT
                else
                  echo "Dev patch is already higher than our new patch, no collision"
                  echo "DEV_COLLISION=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "Dev version has different major.minor, no collision"
                echo "DEV_COLLISION=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "Error parsing dev version, skipping collision check"
              echo "DEV_COLLISION=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Dev branch does not exist, skipping check"
            echo "DEV_COLLISION=false" >> $GITHUB_OUTPUT
          fi
          
          # Return to security branch
          git checkout ${{ steps.set-branch.outputs.security_branch }}

      - name: Update dev branch if version collision
        if: steps.check-dev.outputs.DEV_COLLISION == 'true'
        run: |
          # Checkout dev branch
          git checkout -b dev origin/dev
          
          # Update Solution.props with new dev version
          sed -i "s/<SolutionVersion>.*<\/SolutionVersion>/<SolutionVersion>${{ steps.check-dev.outputs.DEV_NEW_VERSION }}<\/SolutionVersion>/" Solution.props
          echo "Updated Solution.props in dev branch with new version: ${{ steps.check-dev.outputs.DEV_NEW_VERSION }}"
          
          # Commit changes to dev branch
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Solution.props
          git commit -m "chore: bump version to ${{ steps.check-dev.outputs.DEV_NEW_VERSION }} to avoid collision with security patch"
          
          # Push changes to dev branch
          git push origin dev
          
          # Return to security branch
          git checkout ${{ steps.set-branch.outputs.security_branch }}

      - name: Create PR for security patch
        id: create-pr
        if: github.event.inputs.update_changelog == 'true' || steps.commit-changes.outputs.changes_made == 'true'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prTitle = `security: release security patch v${{ steps.calculate-version.outputs.new-version }}`;
            
            // Create PR body with proper variable handling
            let prBody = `## Security Release v${{ steps.calculate-version.outputs.new-version }}
            
            ### Security Fix
            
            - ${{ github.event.inputs.description }}
            
            This PR contains a security patch release that addresses critical security issues.
            
            ### Changes
            
            - Bumped version to ${{ steps.calculate-version.outputs.new-version }}
            - Updated badges in README.md`;
            
            // Add changelog update if applicable
            if ('${{ github.event.inputs.update_changelog }}' === 'true') {
              prBody += '\n- Updated CHANGELOG.md with security fix details';
            }
            
            // Add milestone update info if available
            const milestoneResult = '${{ toJSON(steps.check-milestones.outputs.result) }}';
            if (milestoneResult && milestoneResult !== 'null' && milestoneResult !== '""') {
              try {
                const milestoneData = JSON.parse(milestoneResult);
                if (milestoneData.updatedMilestones && milestoneData.updatedMilestones.length > 0) {
                  prBody += '\n\n### Updated Milestones\n\n';
                  for (const m of milestoneData.updatedMilestones) {
                    prBody += `- ${m.from} → ${m.to}\n`;
                  }
                }
              } catch (e) {
                console.log('Error parsing milestone data:', e);
              }
            }
            
            // Add dev branch update info if applicable
            if ('${{ steps.check-dev.outputs.DEV_COLLISION }}' === 'true') {
              prBody += `\n\n### Dev Branch Update\n\nThe dev branch version has been updated from ${{ steps.check-dev.outputs.DEV_VERSION }} to ${{ steps.check-dev.outputs.DEV_NEW_VERSION }} to avoid version collision.`;
            }
            
            // Add note about release draft
            prBody += `\n\n### Release Draft\n\nA GitHub Release draft will be created automatically when this PR is merged.`;
            
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                body: prBody,
                head: '${{ steps.set-branch.outputs.security_branch }}',
                base: 'main'
              });
              
              console.log(`PR created: ${pr.data.html_url}`);
              
              // Add security label if it exists
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.data.number,
                  labels: ['security']
                });
              } catch (error) {
                console.log('Could not add security label, it may not exist');
              }
              
              return {
                pr_number: pr.data.number,
                pr_url: pr.data.html_url
              };
            } catch (error) {
              console.log('Error creating PR:');
              console.log(error);
              return null;
            }

      - name: Create GitHub Release Draft
        if: steps.create-pr.outcome == 'skipped' || steps.create-pr.outputs.result == 'null'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.calculate-version.outputs.new-version }}
          name: Security Release ${{ steps.calculate-version.outputs.new-version }}
          body: |
            ## Security Release ${{ steps.calculate-version.outputs.new-version }}
            
            ### Security Fix
            
            - ${{ github.event.inputs.description }}
            
            This is a security patch release that addresses critical security issues.
          draft: true
          prerelease: false
