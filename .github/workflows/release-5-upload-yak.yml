name: ðŸš€ 5 Upload to Yak Rhino Server

# Description: This workflow uploads the release artifacts to the Yak Rhino Server.
# It must be triggered manually after the release is built.
#
# Prerequisites:
# - A YAK_AUTH_TOKEN secret must be configured in your repository settings
#   To obtain a token:
#   1. Install the Yak CLI: https://developer.rhino3d.com/guides/yak/yak-cli-reference/
#   2. Run: yak login --ci
#   3. Add the displayed token as a repository secret named YAK_AUTH_TOKEN
#
# Triggers:
# - Manually via workflow_dispatch
#
# Permissions:
# - contents:read - Required to read repository content for building
# - contents:write - Required to upload assets to releases (only when triggered by release)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to upload (defaults to latest release tag)'
        required: false
        default: ''

jobs:
  upload-to-yak:
    name: Upload to Yak
    runs-on: windows-latest

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: ./.github/actions/versioning/get-version
        with:
          branch: main

      - name: Determine pre-release flag
        id: prerelease
        shell: bash
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          if [[ "$VERSION" =~ -(dev|alpha|beta|rc) ]]; then
            echo "PRE_RELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "PRE_RELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Create artifacts directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
        
      - name: Download Windows release asset
        uses: robinraju/release-downloader@v1
        with:
          repository: ${{ github.repository }}
          tag: ${{ steps.get_version.outputs.version }}
          fileName: "SmartHopper-${{ steps.get_version.outputs.version }}-Rhino8-Windows.zip"
          out-file-path: "artifacts"
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Download Mac release asset
      #   uses: robinraju/release-downloader@v1
      #   with:
      #     repository: ${{ github.repository }}
      #     tag: ${{ steps.get_version.outputs.version }}
      #     fileName: "SmartHopper-${{ steps.get_version.outputs.version }}-Rhino8-Mac-not-tested.zip"
      #     out-file-path: "artifacts"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify downloaded assets
        shell: pwsh
        run: |
          $windowsFile = "artifacts/SmartHopper-${{ steps.get_version.outputs.version }}-Rhino8-Windows.zip"
          $macFile = "artifacts/SmartHopper-${{ steps.get_version.outputs.version }}-Rhino8-Mac-not-tested.zip"
          
          if (-not (Test-Path $windowsFile)) {
            Write-Host "::error::Windows asset not found after download: $windowsFile"
            exit 1
          }
          
          if (-not (Test-Path $macFile)) {
            Write-Host "::error::Mac asset not found after download: $macFile"
            exit 1
          }
          
          Write-Host "Assets downloaded successfully"
          
          # Rename files to make them easier to reference in Yak commands
          Move-Item -Path $windowsFile -Destination "artifacts/windows.zip" -Force
          Move-Item -Path $macFile -Destination "artifacts/mac.zip" -Force

      - name: Download Yak CLI
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "http://files.mcneel.com/yak/tools/latest/yak.exe" -OutFile "yak.exe"
          Write-Host "Downloaded Yak CLI"

      - name: Prepare Windows Yak package
        id: prepare_windows
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.version }}"
          $pkgDir = "yak-windows"
          Remove-Item $pkgDir -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path $pkgDir
          Expand-Archive -Path "artifacts/windows.zip" -DestinationPath $pkgDir -Force
          Copy-Item -Path "yak-package\*" -Destination $pkgDir -Recurse -Force
          (Get-Content "$pkgDir/manifest.yml") -replace '\{\{VERSION\}\}', $version | Set-Content "$pkgDir/manifest.yml"
          $zipName = "SmartHopper-$version-Windows-Yak.zip"
          Compress-Archive -Path "$pkgDir/*" -DestinationPath $zipName -Force
          echo "windows_yak_package=$zipName" >> $env:GITHUB_OUTPUT

      # - name: Prepare Mac Yak package
      #   id: prepare_mac
      #   shell: pwsh
      #   run: |
      #     $version = "${{ steps.get_version.outputs.version }}"
      #     $pkgDir = "yak-mac"
      #     Remove-Item $pkgDir -Recurse -Force -ErrorAction SilentlyContinue
      #     New-Item -ItemType Directory -Path $pkgDir
      #     Expand-Archive -Path "artifacts/mac.zip" -DestinationPath $pkgDir -Force
      #     Copy-Item -Path "yak-package\*" -Destination $pkgDir -Recurse -Force
      #     (Get-Content "$pkgDir/manifest.yml") -replace '\{\{VERSION\}\}', $version | Set-Content "$pkgDir/manifest.yml"
      #     $zipName = "SmartHopper-$version-Mac-Yak.zip"
      #     Compress-Archive -Path "$pkgDir/*" -DestinationPath $zipName -Force
      #     echo "mac_yak_package=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload Windows Yak package to Yak
        shell: pwsh
        run: |
          $PreRelease = "${{ steps.prerelease.outputs.PRE_RELEASE }}"
          $Flags = ""
          if ($PreRelease -eq "true") { $Flags = "--pre" }
          $FilePath = "${{ steps.prepare_windows.outputs.windows_yak_package }}"
          Write-Host "Uploading Windows Yak package: $FilePath"
          ./yak.exe push $FilePath $Flags
          if ($LASTEXITCODE -ne 0) {
            Write-Host "::error::Failed to upload Windows Yak package"
            exit 1
          } else {
            Write-Host "Successfully uploaded Windows Yak package"
          }
        env:
          YAK_TOKEN: ${{ secrets.YAK_AUTH_TOKEN }}

      # - name: Upload Mac Yak package to Yak
      #   shell: pwsh
      #   run: |
      #     $PreRelease = "${{ steps.prerelease.outputs.PRE_RELEASE }}"
      #     $Flags = ""
      #     if ($PreRelease -eq "true") { $Flags = "--pre" }
      #     $FilePath = "${{ steps.prepare_mac.outputs.mac_yak_package }}"
      #     Write-Host "Uploading Mac Yak package: $FilePath"
      #     ./yak.exe push $FilePath $Flags
      #     if ($LASTEXITCODE -ne 0) {
      #       Write-Host "::error::Failed to upload Mac Yak package"
      #       exit 1
      #     } else {
      #       Write-Host "Successfully uploaded Mac Yak package"
      #     }
      #   env:
      #     YAK_TOKEN: ${{ secrets.YAK_AUTH_TOKEN }}
