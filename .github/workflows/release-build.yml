name: ðŸš€ Build Project

# Description: This workflow builds the project to verify that it compiles correctly.
# It can be triggered manually to validate the build process without creating a release.
# It also builds and attaches artifacts when a non-draft release is published.
#
# Triggers:
# - Manually via workflow_dispatch
# - Automatically when a release is published (excluding drafts)
#
# Permissions:
# - contents:read - Required to read repository content for building
# - contents:write - Required to upload assets to releases (only when triggered by release)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (using the latest release tag if empty)'
        required: false
        default: ''
      upload_to_release:
        description: 'Upload artifacts to the corresponding release'
        type: boolean
        default: false
  release:
    types: [published]
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
      with:
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
        fetch-depth: 0  # Fetch all history for all tags and branches
    
    - name: Get latest release tag
      id: get_latest_release
      shell: pwsh
      run: |
        # Get the latest tag
        $latestTag = git describe --tags --abbrev=0 2>$null
        if (-not $latestTag) {
          $latestTag = "0.1.2-alpha" # Fallback if no tags exist
        }
        Write-Host "Latest tag: $latestTag"
        "LATEST_TAG=$latestTag" >> $env:GITHUB_OUTPUT
    
    - name: Determine version to build
      id: determine_version
      shell: pwsh
      run: |
        $inputVersion = "${{ github.event.inputs.version }}"
        $releaseTag = "${{ github.event.release.tag_name }}"
        $latestTag = "${{ steps.get_latest_release.outputs.LATEST_TAG }}"
        
        # Determine which version to use
        if ($releaseTag) {
          # If triggered by a release event
          $version = $releaseTag
          $isRelease = "true"
        } elseif ($inputVersion) {
          # If manually triggered with a specific version
          $version = $inputVersion
          $isRelease = "${{ github.event.inputs.upload_to_release }}"
        } else {
          # Default to latest tag if no version specified
          $version = $latestTag
          $isRelease = "${{ github.event.inputs.upload_to_release }}"
        }
        
        Write-Host "Building version: $version"
        Write-Host "Is release build: $isRelease"
        
        "VERSION=$version" >> $env:GITHUB_OUTPUT
        "IS_RELEASE=$isRelease" >> $env:GITHUB_OUTPUT
    
    - name: Check if release is draft
      if: github.event_name == 'release'
      id: check_draft
      shell: pwsh
      run: |
        $isDraft = "${{ github.event.release.draft }}"
        "IS_DRAFT=$isDraft" >> $env:GITHUB_OUTPUT
      
    - name: Exit if release is draft
      if: github.event_name == 'release' && steps.check_draft.outputs.IS_DRAFT == 'true'
      shell: pwsh
      run: |
        Write-Host "This is a draft release. Skipping build and upload."
        exit 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v4
      with:
        dotnet-version: 7.0.x
    
    - name: Setup .NET Framework
      shell: pwsh
      run: |
        # .NET Framework 4.8 is pre-installed on Windows 2022 runner
        # Just verify it's available
        Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"
    
    - name: Configure NuGet Sources
      shell: pwsh
      run: |
        # List current sources
        Write-Host "Current NuGet sources:"
        dotnet nuget list source
        
        # Add Rhino source if not already present
        $sources = dotnet nuget list source
        if ($sources -notmatch "https://mcneel.jfrog.io/artifactory/api/nuget/rhino-packages") {
            Write-Host "Adding Rhino NuGet source..."
            dotnet nuget add source "https://mcneel.jfrog.io/artifactory/api/nuget/rhino-packages" -n rhinoSource
        } else {
            Write-Host "Rhino NuGet source already exists."
        }
        
        # Verify final configuration
        Write-Host "Final NuGet sources:"
        dotnet nuget list source
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Create Output Directory
      shell: pwsh
      run: |
        $outputDir = "artifacts"
        New-Item -ItemType Directory -Force -Path $outputDir
        
        # Get the version to build
        $version = "${{ steps.determine_version.outputs.VERSION }}"
        Write-Host "Building for version: $version"
        
        # Copy all build artifacts to the output directory
        $buildDir = "bin\$version\Release"
        
        # Verify build directory exists
        if (!(Test-Path $buildDir)) {
          Write-Host "Error: Build directory '$buildDir' does not exist."
          Write-Host "Available directories in bin:"
          Get-ChildItem -Path "bin" -Directory | ForEach-Object { Write-Host $_.FullName }
          exit 1
        }
        
        # Define the target platforms
        $platforms = @("net48", "net7.0-windows", "net7.0")
        
        # Copy only .gha and .dll files directly from each platform folder (not recursive)
        foreach ($platform in $platforms) {
          $platformPath = Join-Path $buildDir $platform
          
          if (Test-Path $platformPath) {
            Write-Host "Processing platform: $platform"
            
            # Create the target directory
            $targetPlatformPath = Join-Path $outputDir $platform
            New-Item -ItemType Directory -Force -Path $targetPlatformPath
            
            # List files in the source directory to verify what's available
            Write-Host "Files available in source directory ($platformPath):"
            Get-ChildItem -Path $platformPath -File | ForEach-Object { Write-Host "  - $($_.Name)" }
            
            # Copy only .gha and .dll files directly in the platform folder (not recursive)
            $filesCopied = 0
            Get-ChildItem -Path $platformPath -File | 
              Where-Object { ($_.Extension -eq ".dll" -or $_.Extension -eq ".gha") } |
              ForEach-Object {
                $targetFile = Join-Path $targetPlatformPath $_.Name
                Write-Host "Copying $($_.FullName) to $targetFile"
                Copy-Item $_.FullName -Destination $targetFile -Force
                $filesCopied++
              }
            
            Write-Host "Copied $filesCopied files to $targetPlatformPath"
            
            # Verify files were copied
            $copiedFiles = Get-ChildItem -Path $targetPlatformPath -File
            Write-Host "Files in target directory ($targetPlatformPath): $($copiedFiles.Count)"
            $copiedFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
          } else {
            Write-Host "##[warning] Platform folder $platformPath not found, skipping"
          }
        }
        
        # List all copied files for verification
        Write-Host "Files copied to artifacts directory:"
        Get-ChildItem -Path $outputDir -Recurse | Select-Object FullName

    - name: Validate build artifacts
      shell: pwsh
      run: |
        # Count the number of .csproj files in the solution
        $csprojCount = (Get-ChildItem -Path "." -Recurse -Filter "*.csproj" | 
                        Where-Object { $_.Name -like "SmartHopper.*" -and $_.Name -notlike "*.Test*" -and $_.Name -notlike "*Template*" } | 
                        Measure-Object).Count
        
        Write-Host "Found $csprojCount SmartHopper .csproj files in the solution"
        Write-Host "Expected projects: "
        Get-ChildItem -Path "." -Recurse -Filter "*.csproj" | 
          Where-Object { $_.Name -like "SmartHopper.*" -and $_.Name -notlike "*.Test*" -and $_.Name -notlike "*Template*" } |
          ForEach-Object { Write-Host "  - $($_.Name)" }
        
        # Define the target platforms
        $platforms = @("net48", "net7.0-windows", "net7.0")
        $missingFiles = $false
        
        foreach ($platform in $platforms) {
          # Check both the build directory and the artifacts directory
          $buildDir = "bin\${{ steps.determine_version.outputs.VERSION }}\Release"
          $buildPlatformPath = Join-Path $buildDir $platform
          $artifactsPlatformPath = Join-Path "artifacts" $platform
          
          Write-Host "Checking platform: $platform"
          
          # Check build directory first
          if (Test-Path $buildPlatformPath) {
            $buildDirFiles = Get-ChildItem -Path $buildPlatformPath -File -Include "*.gha","*.dll"
            $smartHopperBuildFiles = $buildDirFiles | Where-Object { 
              ($_.Name -like "SmartHopper.*.dll" -or $_.Name -like "SmartHopper.*.gha") -and 
              $_.Name -notlike "*.Test*" -and $_.Name -notlike "*Template*" 
            }
            
            Write-Host "Found $($smartHopperBuildFiles.Count) SmartHopper DLL/GHA files in build directory ($buildPlatformPath)"
            $smartHopperBuildFiles | ForEach-Object { Write-Host "  - $($_.Name)" }
            
            if ($smartHopperBuildFiles.Count -lt $csprojCount) {
              Write-Host "##[warning] Fewer SmartHopper files in build directory than expected. This may indicate build issues."
            }
          } else {
            Write-Host "##[warning] Build platform folder ${buildPlatformPath} not found"
          }
          
          # Now check artifacts directory
          if (Test-Path $artifactsPlatformPath) {
            $smartHopperFileCount = (Get-ChildItem -Path $artifactsPlatformPath -File | 
                                    Where-Object { ($_.Name -like "SmartHopper.*.dll" -or $_.Name -like "SmartHopper.*.gha") -and 
                                                  $_.Name -notlike "*.Test*" -and $_.Name -notlike "*Template*" } | 
                                    Measure-Object).Count
            
            Write-Host "Found $smartHopperFileCount SmartHopper DLL/GHA files in artifacts directory ($artifactsPlatformPath)"
            
            # Verify that we have the expected number of files
            if ($smartHopperFileCount -lt $csprojCount) {
              Write-Host "##[error] Missing SmartHopper files in $platform folder! Expected at least $csprojCount files but found only $smartHopperFileCount."
              Write-Host "##[error] This could indicate that some projects failed to build or weren't copied correctly."
              Write-Host "Files found in ${artifactsPlatformPath}:"
              Get-ChildItem -Path $artifactsPlatformPath -File | ForEach-Object { Write-Host "  - $($_.Name)" }
              $missingFiles = $true
            }
          } else {
            Write-Host "##[warning] Artifacts platform folder ${artifactsPlatformPath} not found, skipping validation"
          }
        }
        
        if ($missingFiles) {
          Write-Host "##[error] Build validation failed: Missing expected SmartHopper files in one or more platform folders."
          exit 1
        } else {
          Write-Host "##[notice] Build validation successful: All expected SmartHopper files are present."
        }

    - name: Create ZIP Archives
      if: steps.determine_version.outputs.IS_RELEASE == 'true'
      id: create_zips
      shell: pwsh
      run: |
        $version = "${{ steps.determine_version.outputs.VERSION }}"
        $platforms = @{
          "net48" = "SmartHopper-$version-Rhino7-Windows.zip"
          "net7.0-windows" = "SmartHopper-$version-Rhino8-Windows.zip"
          "net7.0" = "SmartHopper-$version-Rhino8-Mac.zip"
        }
        
        $zipPaths = @()
        
        foreach ($platform in $platforms.Keys) {
          $zipName = $platforms[$platform]
          $platformPath = Join-Path "artifacts" $platform
          
          if (Test-Path $platformPath) {
            Write-Host "Creating zip for ${platform}: ${zipName}"
            
            # Create zip directly from the platform folder contents (not the folder itself)
            Compress-Archive -Path "$platformPath\*" -DestinationPath $zipName -Force
            $zipPaths += $zipName
          } else {
            Write-Host "Platform folder ${platformPath} not found, skipping"
          }
        }
        
        # Output the zip paths as a JSON array for the next step
        $zipPathsJson = ConvertTo-Json -InputObject $zipPaths -Compress
        echo "zip_paths=$zipPathsJson" >> $env:GITHUB_OUTPUT

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
      with:
        name: plugin-package
        path: artifacts/
    
    - name: Get Release Upload URL
      if: steps.determine_version.outputs.IS_RELEASE == 'true' && github.event_name != 'release'
      id: get_release_url
      shell: pwsh
      run: |
        $version = "${{ steps.determine_version.outputs.VERSION }}"
        $token = "${{ secrets.GITHUB_TOKEN }}"
        $headers = @{
          "Authorization" = "Bearer $token"
          "Accept" = "application/vnd.github+json"
          "X-GitHub-Api-Version" = "2022-11-28"
        }
        
        # Get the release by tag
        $releaseUrl = "https://api.github.com/repos/${{ github.repository }}/releases/tags/$version"
        Write-Host "Fetching release info from: $releaseUrl"
        
        try {
          $release = Invoke-RestMethod -Uri $releaseUrl -Headers $headers -Method Get
          $uploadUrl = $release.upload_url
          Write-Host "Found release upload URL: $uploadUrl"
          "UPLOAD_URL=$uploadUrl" >> $env:GITHUB_OUTPUT
        } catch {
          Write-Host "Error fetching release: $_"
          Write-Host "Release with tag $version might not exist or you don't have permission to access it."
          exit 1
        }
        
    - name: Upload Windows Rhino8 Release Asset
      if: steps.determine_version.outputs.IS_RELEASE == 'true'
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event_name == 'release' && github.event.release.upload_url || steps.get_release_url.outputs.UPLOAD_URL }}
        asset_path: SmartHopper-${{ steps.determine_version.outputs.VERSION }}-Rhino8-Windows.zip
        asset_name: SmartHopper-${{ steps.determine_version.outputs.VERSION }}-Rhino8-Windows.zip
        asset_content_type: application/zip
        
    - name: Upload Mac Rhino8 Release Asset
      if: steps.determine_version.outputs.IS_RELEASE == 'true'
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event_name == 'release' && github.event.release.upload_url || steps.get_release_url.outputs.UPLOAD_URL }}
        asset_path: SmartHopper-${{ steps.determine_version.outputs.VERSION }}-Rhino8-Mac.zip
        asset_name: SmartHopper-${{ steps.determine_version.outputs.VERSION }}-Rhino8-Mac.zip
        asset_content_type: application/zip
