name: ðŸš€ Build Project

# Description: This workflow builds the project to verify that it compiles correctly.
# It can be triggered manually to validate the build process without creating a release.
# It also builds and attaches artifacts when a non-draft release is published.
#
# Triggers:
# - Manually via workflow_dispatch
# - Automatically when a release is published (excluding drafts)
# - (Commented out) Automatically on push to main branch
# - (Commented out) Automatically on pull requests to main branch
#
# Permissions:
# - contents:read - Required to read repository content for building
# - contents:write - Required to upload assets to releases (only when triggered by release)

on:
  workflow_dispatch:
  release:
    types: [published]
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Check if release is draft
      if: github.event_name == 'release'
      id: check_draft
      shell: pwsh
      run: |
        $isDraft = "${{ github.event.release.draft }}"
        "IS_DRAFT=$isDraft" >> $env:GITHUB_OUTPUT
      
    - name: Exit if release is draft
      if: github.event_name == 'release' && steps.check_draft.outputs.IS_DRAFT == 'true'
      shell: pwsh
      run: |
        Write-Host "This is a draft release. Skipping build and upload."
        exit 0
      
    - name: Checkout repository
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
      with:
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v4
      with:
        dotnet-version: 7.0.x
    
    - name: Setup .NET Framework
      shell: pwsh
      run: |
        # .NET Framework 4.8 is pre-installed on Windows 2022 runner
        # Just verify it's available
        Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"
    
    - name: Configure NuGet Sources
      shell: pwsh
      run: |
        # List current sources
        Write-Host "Current NuGet sources:"
        dotnet nuget list source
        
        # Add Rhino source if not already present
        $sources = dotnet nuget list source
        if ($sources -notmatch "https://mcneel.jfrog.io/artifactory/api/nuget/rhino-packages") {
            Write-Host "Adding Rhino NuGet source..."
            dotnet nuget add source "https://mcneel.jfrog.io/artifactory/api/nuget/rhino-packages" -n rhinoSource
        } else {
            Write-Host "Rhino NuGet source already exists."
        }
        
        # Verify final configuration
        Write-Host "Final NuGet sources:"
        dotnet nuget list source
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Create Output Directory
      shell: pwsh
      run: |
        $outputDir = "artifacts"
        New-Item -ItemType Directory -Force -Path $outputDir
        
        # Copy all build artifacts to the output directory
        $buildDir = "bin\${{ github.event.release.tag_name || '0.1.2-alpha' }}\Release"
        
        # Copy all .gha files and their dependencies
        Get-ChildItem -Path $buildDir -Recurse -Include "*.gha","*.dll" -Exclude "*Rhino*","*Grasshopper*" | 
          ForEach-Object {
            $relativePath = $_.FullName.Replace("$((Get-Location).Path)\$buildDir\", "")
            $targetPath = Join-Path $outputDir $relativePath
            $targetDir = Split-Path -Parent $targetPath
            
            if (!(Test-Path $targetDir)) {
              New-Item -ItemType Directory -Force -Path $targetDir
            }
            
            Write-Host "Copying $($_.FullName) to $targetPath"
            Copy-Item $_.FullName -Destination $targetPath
          }
        
        # List all copied files for verification
        Write-Host "Files copied to artifacts directory:"
        Get-ChildItem -Path $outputDir -Recurse | Select-Object FullName

    - name: Create ZIP Archives
      if: github.event_name == 'release'
      id: create_zips
      shell: pwsh
      run: |
        $version = "${{ github.event.release.tag_name }}"
        $platforms = @{
          "net48" = "SmartHopper-$version-Rhino7-Windows.zip"
          "net7.0-windows" = "SmartHopper-$version-Rhino8-Windows.zip"
          "net7.0" = "SmartHopper-$version-Rhino8-Mac.zip"
        }
        
        $zipPaths = @()
        
        foreach ($platform in $platforms.Keys) {
          $zipName = $platforms[$platform]
          $platformPath = Join-Path "artifacts" $platform
          
          if (Test-Path $platformPath) {
            Write-Host "Creating zip for ${platform}: ${zipName}"
            # Create zip directly from the platform folder contents (not the folder itself)
            Compress-Archive -Path "$platformPath\*" -DestinationPath $zipName
            $zipPaths += $zipName
          } else {
            Write-Host "Platform folder ${platformPath} not found, skipping"
          }
        }
        
        # Output the zip paths as a JSON array for the next step
        $zipPathsJson = ConvertTo-Json -InputObject $zipPaths -Compress
        echo "zip_paths=$zipPathsJson" >> $env:GITHUB_OUTPUT

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
      with:
        name: plugin-package
        path: artifacts/
        
    # - name: Upload Windows Rhino7 Release Asset
    #   if: github.event_name == 'release'
    #   uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ github.event.release.upload_url }}
    #     asset_path: SmartHopper-${{ github.event.release.tag_name }}-Rhino7-Windows.zip
    #     asset_name: SmartHopper-${{ github.event.release.tag_name }}-Rhino7-Windows.zip
    #     asset_content_type: application/zip
        
    - name: Upload Windows Rhino8 Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: SmartHopper-${{ github.event.release.tag_name }}-Rhino8-Windows.zip
        asset_name: SmartHopper-${{ github.event.release.tag_name }}-Rhino8-Windows.zip
        asset_content_type: application/zip
        
    - name: Upload Mac Rhino8 Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: SmartHopper-${{ github.event.release.tag_name }}-Rhino8-Mac.zip
        asset_name: SmartHopper-${{ github.event.release.tag_name }}-Rhino8-Mac.zip
        asset_content_type: application/zip
