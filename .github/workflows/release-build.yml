name: ðŸš€ Build Project

# Description: This workflow builds the project to verify that it compiles correctly.
# It can be triggered manually to validate the build process without creating a release.
# It also builds and attaches artifacts when a non-draft release is published.
#
# Triggers:
# - Manually via workflow_dispatch
# - Automatically when a release is published (excluding drafts)
# - (Commented out) Automatically on push to main branch
# - (Commented out) Automatically on pull requests to main branch
#
# Permissions:
# - contents:read - Required to read repository content for building
# - contents:write - Required to upload assets to releases (only when triggered by release)

on:
  workflow_dispatch:
  release:
    types: [published]
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Check if release is draft
      if: github.event_name == 'release'
      id: check_draft
      shell: pwsh
      run: |
        $isDraft = "${{ github.event.release.draft }}"
        "IS_DRAFT=$isDraft" >> $env:GITHUB_OUTPUT
      
    - name: Exit if release is draft
      if: github.event_name == 'release' && steps.check_draft.outputs.IS_DRAFT == 'true'
      shell: pwsh
      run: |
        Write-Host "This is a draft release. Skipping build and upload."
        exit 0
      
    - name: Checkout repository
      uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
      with:
        ref: ${{ github.event_name == 'release' && github.event.release.tag_name || '' }}
    
    - name: Setup .NET
      uses: actions/setup-dotnet@3447fd6a9f9e57506b15f895c5b76d3b197dc7c2 # v4
      with:
        dotnet-version: |
          7.0.x
          8.0.x
    
    - name: Setup .NET Framework
      shell: pwsh
      run: |
        # .NET Framework 4.8 is pre-installed on Windows 2022 runner
        # Just verify it's available
        Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full\"
    
    - name: Configure NuGet Sources
      shell: pwsh
      run: |
        # Remove existing sources if they exist
        $sources = dotnet nuget list source
        if ($sources -match "nugetSource") {
            dotnet nuget remove source nugetSource
        }
        if ($sources -match "rhinoSource") {
            dotnet nuget remove source rhinoSource
        }
        
        # Add sources
        dotnet nuget add source "https://api.nuget.org/v3/index.json" -n nugetSource
        dotnet nuget add source "https://mcneel.jfrog.io/artifactory/api/nuget/rhino-packages" -n rhinoSource
        
        # Verify configuration
        dotnet nuget list source
        
    - name: Install ILMerge
      run: |
        nuget install ILMerge -Version 3.0.41
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Merge Dependencies
      shell: pwsh
      run: |
        $outputDir = "merged"
        New-Item -ItemType Directory -Force -Path $outputDir
        
        # Find the main .gha file and its directory
        $mainAssembly = Get-ChildItem -Recurse -Filter "*.gha" | Select-Object -First 1
        $assemblyDir = $mainAssembly.Directory.FullName
        
        # Find ILMerge executable
        $ilmerge = Get-ChildItem -Recurse -Filter "ilmerge.exe" | Select-Object -First 1
        
        # Get all dependency DLLs except Rhino and Grasshopper
        $dependencies = Get-ChildItem -Path $assemblyDir -Filter "*.dll" |
            Where-Object { $_.Name -notmatch "Rhino|Grasshopper" } |
            ForEach-Object { $_.FullName }
        
        # Create space-separated list of dependencies
        $dependencyList = $dependencies -join " "
        
        # Run ILMerge
        & $ilmerge.FullName /out:"$outputDir/$($mainAssembly.Name)" /targetplatform:"v4" "$($mainAssembly.FullName)" $dependencyList

    - name: Create ZIP Archive
      if: github.event_name == 'release'
      id: create_zip
      shell: pwsh
      run: |
        $version = "${{ github.event.release.tag_name }}"
        $zipName = "SmartHopper-$version.zip"
        Compress-Archive -Path (Get-ChildItem -Path merged\*).FullName -DestinationPath $zipName
        "zip_name=$zipName" >> $env:GITHUB_OUTPUT

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4
      with:
        name: plugin-package
        path: merged/
        
    - name: Upload Release Asset
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.create_zip.outputs.zip_name }}
        asset_name: ${{ steps.create_zip.outputs.zip_name }}
        asset_content_type: application/zip
