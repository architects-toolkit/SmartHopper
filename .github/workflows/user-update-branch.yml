name: üë§üîÑ Update Branch

# Description: This workflow updates a target branch with changes from an origin branch.
# If the merge has no conflicts, it will automatically merge the changes.
# If there are conflicts, it will create a pull request for manual resolution.
#
# This workflow is manually triggered and requires specifying the origin and target branches.
#
# Triggers:
# - Manually via workflow_dispatch with origin and target branch inputs
#
# Permissions:
# - contents:write - Required to create branches and commit changes
# - pull-requests:write - Required to create pull requests

on:
  workflow_dispatch:
    inputs:
      origin_branch:
        description: 'Origin branch (source of changes)'
        required: true
        type: string
      target_branch:
        description: 'Target branch (to be updated)'
        required: true
        type: string
      filter:
        description: 'Specific folder to update (e.g., .github or src/SmartHopper.Components). Leave blank to update all code.'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Validate branches
        id: validate-branches
        run: |
          # Check if origin branch exists
          if ! git ls-remote --heads origin ${{ github.event.inputs.origin_branch }} | grep -q ${{ github.event.inputs.origin_branch }}; then
            echo "::error::Origin branch '${{ github.event.inputs.origin_branch }}' does not exist."
            exit 1
          fi
          
          # Check if target branch exists
          if ! git ls-remote --heads origin ${{ github.event.inputs.target_branch }} | grep -q ${{ github.event.inputs.target_branch }}; then
            echo "::error::Target branch '${{ github.event.inputs.target_branch }}' does not exist."
            exit 1
          fi
          
          # Check if branches are the same
          if [[ "${{ github.event.inputs.origin_branch }}" == "${{ github.event.inputs.target_branch }}" ]]; then
            echo "::error::Origin and target branches cannot be the same."
            exit 1
          fi
          
          echo "Branches validated successfully."
        shell: bash

      - name: Check for existing PR
        id: check-existing-pr
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prTitle = `chore(branch): update ${{ github.event.inputs.target_branch }} from ${{ github.event.inputs.origin_branch }}`;
            
            console.log(`Checking for existing PRs with title: ${prTitle}`);
            
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: '${{ github.event.inputs.target_branch }}'
            });
            
            const existingPR = prs.data.find(pr => 
              pr.title === prTitle && 
              pr.head.ref.includes('update-branch')
            );
            
            if (existingPR) {
              console.log(`Found existing PR: #${existingPR.number} (${existingPR.html_url})`);
              return {
                exists: true,
                pr_number: existingPR.number,
                pr_url: existingPR.html_url
              };
            } else {
              console.log('No existing PR found');
              return {
                exists: false
              };
            }

      - name: Exit if PR exists
        if: fromJSON(steps.check-existing-pr.outputs.result).exists == true
        run: |
          echo "::warning::An open PR already exists for updating ${{ github.event.inputs.target_branch }} from ${{ github.event.inputs.origin_branch }}. See PR #$(echo '${{ steps.check-existing-pr.outputs.result }}' | jq -r .pr_number) at $(echo '${{ steps.check-existing-pr.outputs.result }}' | jq -r .pr_url)"
          exit 0
        shell: bash

      - name: Create temporary branch
        id: create-temp-branch
        run: |
          # Create a unique branch name
          TEMP_BRANCH="update-branch/${{ github.event.inputs.target_branch }}-from-${{ github.event.inputs.origin_branch }}"
          echo "temp_branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT
          
          # Checkout target branch
          git checkout ${{ github.event.inputs.target_branch }}
          
          # Create temporary branch from target
          git checkout -b $TEMP_BRANCH
          
          echo "Created temporary branch: $TEMP_BRANCH"
        shell: bash

      - name: Attempt merge
        id: attempt-merge
        run: |
          ORIGIN=${{ github.event.inputs.origin_branch }}
          TARGET=${{ github.event.inputs.target_branch }}
          FILTER=${{ github.event.inputs.filter }}
          if [[ -n "$FILTER" ]]; then
            echo "Updating specific path: $FILTER"
            git checkout origin/$ORIGIN -- "$FILTER"
            if git diff --quiet; then
              echo "merge_status=no_changes" >> $GITHUB_OUTPUT
              echo "No changes to merge for path $FILTER."
            else
              git add "$FILTER"
              git commit -m "chore(branch): update $TARGET from $ORIGIN for path $FILTER"
              echo "merge_status=success" >> $GITHUB_OUTPUT
            fi
            exit 0
          fi

          # Try to merge origin into temp branch
          if git merge origin/${{ github.event.inputs.origin_branch }} --no-ff; then
            echo "merge_status=success" >> $GITHUB_OUTPUT
            echo "Merge successful, no conflicts detected."
            
            # Check if there are any changes between branches
            if git diff --quiet origin/${{ github.event.inputs.target_branch }} origin/${{ github.event.inputs.origin_branch }}; then
              echo "merge_status=no_changes" >> $GITHUB_OUTPUT
              echo "No changes to merge. Branches are already in sync."
            fi
          else
            echo "merge_status=conflict" >> $GITHUB_OUTPUT
            echo "Merge conflicts detected. Will create a PR for manual resolution."
            
            # Abort the merge
            git merge --abort
            
            # Create a new branch with changes from origin
            git checkout ${{ github.event.inputs.origin_branch }}
            git checkout -b ${{ steps.create-temp-branch.outputs.temp_branch }}
          fi
        shell: bash

      - name: Push changes if no conflicts
        id: push-changes
        if: steps.attempt-merge.outputs.merge_status == 'success'
        run: |
          # Try to push changes directly to target branch
          if git push origin ${{ steps.create-temp-branch.outputs.temp_branch }}:${{ github.event.inputs.target_branch }}; then
            echo "push_status=success" >> $GITHUB_OUTPUT
            echo "Successfully updated ${{ github.event.inputs.target_branch }} with changes from ${{ github.event.inputs.origin_branch }}."
          else
            echo "push_status=failed" >> $GITHUB_OUTPUT
            echo "Direct push failed. Branch may be protected. Will create a PR instead."
          fi
        shell: bash
        continue-on-error: true

      - name: Create PR if conflicts or protected branch
        if: steps.attempt-merge.outputs.merge_status == 'conflict' || steps.push-changes.outputs.push_status == 'failed'
        id: create-pr
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Push the temporary branch
            const { execSync } = require('child_process');
            execSync('git push origin ${{ steps.create-temp-branch.outputs.temp_branch }}');
            
            const prTitle = `chore(branch): update ${{ github.event.inputs.target_branch }} from ${{ github.event.inputs.origin_branch }}`;
            
            let prBody = `## Branch Update

            This PR updates \`${{ github.event.inputs.target_branch }}\` with changes from \`${{ github.event.inputs.origin_branch }}\`.`;
            
            if ('${{ steps.attempt-merge.outputs.merge_status }}' === 'conflict') {
              prBody += `

            ### ‚ö†Ô∏è Merge Conflicts

            This PR contains merge conflicts that need to be resolved manually.`;
            } else {
              prBody += `

            ### ‚ÑπÔ∏è Protected Branch

            This PR was created because \`${{ github.event.inputs.target_branch }}\` is a protected branch that requires changes through pull requests.`;
            }
            
            prBody += `

            ### Instructions

            1. ${('${{ steps.attempt-merge.outputs.merge_status }}' === 'conflict') ? 'Resolve the conflicts in this PR' : 'Review the changes'}
            2. Approve and merge the changes
            
            This PR was automatically created by the Branch Update workflow.`;
            
            try {
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: prTitle,
                body: prBody,
                head: '${{ steps.create-temp-branch.outputs.temp_branch }}',
                base: '${{ github.event.inputs.target_branch }}'
              });
              
              console.log(`PR created: ${pr.data.html_url}`);
              
              return {
                pr_number: pr.data.number,
                pr_url: pr.data.html_url
              };
            } catch (error) {
              console.log('Error creating PR:');
              console.log(error);
              return null;
            }

      - name: Output results
        run: |
          if [[ "${{ steps.attempt-merge.outputs.merge_status }}" == "success" && "${{ steps.push-changes.outputs.push_status }}" == "success" ]]; then
            echo "‚úÖ Successfully updated ${{ github.event.inputs.target_branch }} with changes from ${{ github.event.inputs.origin_branch }}."
          elif [[ "${{ steps.attempt-merge.outputs.merge_status }}" == "success" && "${{ steps.push-changes.outputs.push_status }}" == "failed" ]]; then
            echo "‚ÑπÔ∏è Branch is protected. Created PR #$(echo '${{ steps.create-pr.outputs.result }}' | jq -r .pr_number) for review."
            echo "PR URL: $(echo '${{ steps.create-pr.outputs.result }}' | jq -r .pr_url)"
          elif [[ "${{ steps.attempt-merge.outputs.merge_status }}" == "no_changes" ]]; then
            echo "‚ÑπÔ∏è No changes to merge. Branches are already in sync."
          elif [[ "${{ steps.attempt-merge.outputs.merge_status }}" == "conflict" ]]; then
            echo "‚ö†Ô∏è Merge conflicts detected. Created PR #$(echo '${{ steps.create-pr.outputs.result }}' | jq -r .pr_number) for manual resolution."
            echo "PR URL: $(echo '${{ steps.create-pr.outputs.result }}' | jq -r .pr_url)"
          fi
        shell: bash
