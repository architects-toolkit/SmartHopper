name: üë§üîÑ Update Branch

# Description: This workflow updates a target branch with changes from an origin branch.
# If the merge has no conflicts, it will automatically merge the changes.
# If there are conflicts, it will create a pull request for manual resolution.
#
# This workflow is manually triggered and requires specifying the origin and target branches.
#
# Triggers:
# - Manually via workflow_dispatch with origin and target branch inputs
#
# Permissions:
# - contents:write - Required to create branches and commit changes
# - pull-requests:write - Required to create pull requests

on:
  workflow_dispatch:
    inputs:
      origin_branch:
        description: 'Origin branch (source of changes)'
        required: true
        type: string
      target_branch:
        description: 'Target branch(es) as JSON array string, e.g. ["dev","prod"]'
        required: true
        type: string
      filter:
        description: 'Specific folder to update (e.g., .github or src/SmartHopper.Components). Leave blank to update all code.'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  update-branch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target_branch: ${{ fromJson(github.event.inputs.target_branch) }}
    steps:
      - name: Checkout origin branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.origin_branch }}

      - name: Validate branches
        id: validate-branches
        run: |
          # Check if origin branch exists
          if ! git ls-remote --heads origin ${{ github.event.inputs.origin_branch }} | grep -q ${{ github.event.inputs.origin_branch }}; then
            echo "::error::Origin branch '${{ github.event.inputs.origin_branch }}' does not exist."
            exit 1
          fi
          
          # Check if target branch exists
          if ! git ls-remote --heads origin ${{ matrix.target_branch }} | grep -q ${{ matrix.target_branch }}; then
            echo "::error::Target branch '${{ matrix.target_branch }}' does not exist."
            exit 1
          fi
          
          # Check if branches are the same
          if [[ "${{ github.event.inputs.origin_branch }}" == "${{ matrix.target_branch }}" ]]; then
            echo "::error::Origin and target branches cannot be the same."
            exit 1
          fi
          
          echo "Branches validated successfully."
        shell: bash

      - name: Fetch target branch
        run: git fetch origin ${{ matrix.target_branch }}

      - name: Merge target into origin (filtered)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "${{ github.event.inputs.filter }}" ]; then
            # Use merge strategy 'ours' to automatically resolve all conflicts in our favor
            # This ensures the merge operation won't fail on conflicts
            git merge origin/${{ matrix.target_branch }} -s ours --no-commit
            # Now cherry-pick just the files we want from the target branch
            git checkout origin/${{ matrix.target_branch }} -- "${{ github.event.inputs.filter }}"
            git add "${{ github.event.inputs.filter }}"
            git commit -m "chore(branch): update ${{ github.event.inputs.origin_branch }} with ${{ matrix.target_branch }} changes for path ${{ github.event.inputs.filter }}"
          else
            # Attempt normal merge for full updates
            if ! git merge origin/${{ matrix.target_branch }} --no-ff -m "chore(branch): merge ${{ matrix.target_branch }} into ${{ github.event.inputs.origin_branch }}"; then
              echo "::warning::Merge conflicts detected. Creating PR for manual resolution."
              # Reset to pre-merge state so we can still create the PR
              git merge --abort
            fi
          fi

      - name: Push commits to origin branch
        run: git push origin HEAD:${{ github.event.inputs.origin_branch }}

      - name: Create PR via GitHub API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `Update ${context.payload.inputs.target_branch[0]} from ${context.payload.inputs.origin_branch}${context.payload.inputs.filter ? ` for path ${context.payload.inputs.filter}` : ''}`;
            const body = `This PR updates \\`${context.payload.inputs.target_branch[0]}\\` with changes from \\`${context.payload.inputs.origin_branch}\\`${context.payload.inputs.filter ? ` for the path \\`${context.payload.inputs.filter}\\`` : ''}`;
            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              head: context.payload.inputs.origin_branch,
              base: context.payload.inputs.target_branch[0]
            });

      - name: Output results
        run: |
          if git diff --quiet HEAD origin/${{ matrix.target_branch }}; then
            echo "‚ÑπÔ∏è No changes to merge. Branches are already in sync."
          else
            echo "‚úÖ Successfully updated ${{ matrix.target_branch }} with changes from ${{ github.event.inputs.origin_branch }}."
          fi
        shell: bash
