name: "Header Fixer"
description: "Check or fix C# file headers to match .editorconfig header template"
inputs:
  mode:
    description: "Operation mode: fix, check, or soft-check"
    required: false
    default: "soft-check"
runs:
  using: "composite"
  steps:
    - name: Process C# file headers
      shell: bash
      env:
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}
      run: |
        # Determine files to process: changed in PR or all .cs in src/
        if [ "$GITHUB_EVENT_NAME" = "pull_request" ] && [ -f "$GITHUB_EVENT_PATH" ]; then
          BASE_SHA=$(jq -r .pull_request.base.sha < "$GITHUB_EVENT_PATH")
          HEAD_SHA=$(jq -r .pull_request.head.sha < "$GITHUB_EVENT_PATH")
          FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- '*.cs' || true)
        else
          # Fallback to all .cs files under src/
          FILES=$(find src -type f -name '*.cs')
        fi
        # If no files, skip
        if [ -z "$FILES" ]; then
          echo "No C# files to process"
          exit 0
        fi
        ERR=0
        for file in $FILES; do
          if [ -f "$file" ]; then

            # Get year
            year=$(grep -m1 '^ \* Copyright' "$file" | grep -oE '[0-9]{4}')
            [ -z "$year" ] && year=$(date +%Y)
            
            # Create header template
            HEADER="/*\n * SmartHopper - AI-powered Grasshopper Plugin\n * Copyright (C) $year Marc Roca Musach\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n */"
            
            # Get current header
            HEADER_LINES=$(echo -e "$HEADER" | wc -l)
            CURRENT_HEADER=$(head -n $HEADER_LINES "$file")
            
            # Skip if header matches template ignoring year
            HEADER_CAN=$(echo "$HEADER" | sed -E 's/(Copyright \(C\) )[0-9]{4}/\1####/')
            CURRENT_CAN=$(echo "$CURRENT_HEADER" | sed -E 's/(Copyright \(C\) )[0-9]{4}/\1####/')

            echo "Expected Header (Canonical):"
            echo "$HEADER_CAN"
            echo "Current Header (Canonical):"
            echo "$CURRENT_CAN"

            if [ "$HEADER_CAN" = "$CURRENT_CAN" ]; then
              continue
            fi
            
            if [ "$HEADER" != "$CURRENT_HEADER" ]; then
              if [ "${{ inputs.mode }}" = "fix" ]; then
                echo "Updating header in $file"
                # Find namespace line
                NAMESPACE_LINE=$(grep -n '^namespace ' "$file" | head -1 | cut -d: -f1)
                if [ -n "$NAMESPACE_LINE" ]; then
                  # Extract content from namespace line to end
                  CONTENT=$(tail -n +$NAMESPACE_LINE "$file")
                  # Write new file with correct header
                  echo -e "$HEADER\n\n$CONTENT" > "$file"
                else
                  echo "Warning: Could not find namespace line in $file"
                fi
              else
                if [ "${{ inputs.mode }}" = "soft-check" ]; then
                  # emit a non-blocking warning
                  echo "::warning file=$file::Header mismatch in $file (run with mode=fix to auto-fix)"
                else
                  echo "Header mismatch in $file"
                  ERR=1
                fi
              fi
            fi
          fi
        done
        exit $ERR
