name: "Using Sorter"
description: "Check or fix C# using directives ordering and remove unused usings"
inputs:
  mode:
    description: "Operation mode: fix, check, or soft-check"
    required: false
    default: "check"
runs:
  using: "composite"
  steps:
    - name: Check for existing .NET SDK
      id: check-dotnet
      shell: bash
      run: |
        if dotnet --version >/dev/null 2>&1; then
          echo "installed=true" >> $GITHUB_OUTPUT
        else
          echo "installed=false" >> $GITHUB_OUTPUT
        fi
    - name: Setup .NET SDK
      if: ${{ steps.check-dotnet.outputs.installed == 'false' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Run using sorter
      shell: bash
      run: |
        FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- '*.cs')
        ERR=0

        # Function to find the nearest project or solution file
        find_project_file() {
          local dir="$(dirname "$1")"
          local project_file
          
          while [ "$dir" != "/" ] && [ "$dir" != "." ]; do
            project_file=$(find "$dir" -maxdepth 1 -type f \( -name '*.csproj' -o -name '*.sln' \) | head -n 1)
            if [ -n "$project_file" ]; then
              echo "$project_file"
              return 0
            fi
            dir="$(dirname "$dir")"
          done
          return 1
        }

        # Process each file
        for file in $FILES; do
          if [[ -f "$file" ]]; then
            project_file=$(find_project_file "$file")
            if [ $? -ne 0 ]; then
              echo "::warning file=$file::Could not find project or solution file for $file"
              continue
            fi

            if [[ "${{ inputs.mode }}" == "fix" ]]; then
              dotnet format style --fix-style usings --include "$file" "$project_file"
            else
              dotnet format style --fix-style usings --include "$file" "$project_file" --verify-no-changes
              CODE=$?
              if [ $CODE -ne 0 ]; then
                if [ "${{ inputs.mode }}" = "soft-check" ]; then
                  echo "::warning file=$file::Using sorter found issues in $file (run with mode=fix to auto-fix)"
                else
                  echo "Using sorter check failed in $file"
                  ERR=1
                fi
              fi
            fi
          fi
        done
        exit $ERR
