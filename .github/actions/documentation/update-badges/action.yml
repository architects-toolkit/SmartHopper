name: 'Update Badges'
description: 'Update the version and status badges in README.md'
inputs:
  branch:
    description: 'Branch name (for context)'
    required: false
    default: ''

outputs:
  version:
    description: 'Current version from Solution.props'
    value: ${{ steps.get-version.outputs.version }}
  badges-changed:
    description: 'Whether badges were changed'
    value: ${{ steps.update-badge.outputs.badges-changed || 'false' }}

runs:
  using: "composite"
  steps:
    - name: Get version from Solution.props
      id: get-version
      shell: bash
      run: |
        VERSION=$(grep -oP '(?<=<SolutionVersion>)[^<]+' Solution.props)
        echo "Current version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update version badge in README.md
      id: update-badge
      shell: bash
      run: |
        # Get the current version
        VERSION="${{ steps.get-version.outputs.version }}"
        
        echo "Current version from Solution.props: $VERSION"
        
        # Format version for shields.io by encoding special characters
        ENCODED_VERSION=$(echo "$VERSION" | sed 's/-/--/g' | sed 's/\./%2E/g')
        
        # Determine color and status based on version
        if [[ $VERSION == *"-dev"* ]]; then
          COLOR="brown"
          STATUS="Unstable%20Development"
        elif [[ $VERSION == *"-alpha"* ]]; then
          COLOR="orange"
          STATUS="Alpha"
        elif [[ $VERSION == *"-beta"* ]]; then
          COLOR="yellow"
          STATUS="Beta"
        elif [[ $VERSION == *"-rc"* ]]; then
          COLOR="lightblue"
          STATUS="Release%20Candidate"
        else
          COLOR="lightgreen"
          STATUS="Stable"
        fi
        
        # Create new badge URLs
        VERSION_BADGE_URL="https://img.shields.io/badge/version-$ENCODED_VERSION-$COLOR"
        STATUS_BADGE_URL="https://img.shields.io/badge/status-$STATUS-$COLOR"
        
        # Create badge markdown
        VERSION_BADGE="[![Version]($VERSION_BADGE_URL)](https://github.com/architects-toolkit/SmartHopper/releases)"
        STATUS_BADGE="[![Status]($STATUS_BADGE_URL)](https://github.com/architects-toolkit/SmartHopper/releases)"
        
        echo "New version badge: $VERSION_BADGE"
        echo "New status badge: $STATUS_BADGE"
        
        BADGES_CHANGED=false
        
        # Update README.md with new badges
        if [[ -f "README.md" ]]; then
          # Check if README contains version badge and if it needs updating
          if grep -q "\[\!\[Version\]" README.md; then
            echo "Found version badge in README"
            
            # Extract current badge URL to check if color matches
            CURRENT_VERSION_BADGE=$(grep -o "\[\!\[Version\](https://img\.shields\.io/badge/version[^)]*)" README.md || echo "")
            
            # Check if the badge needs updating (different version or color)
            if [[ "$CURRENT_VERSION_BADGE" != *"$ENCODED_VERSION"* || "$CURRENT_VERSION_BADGE" != *"-$COLOR"* ]]; then
              sed -i "s|\[\!\[Version\](https://img\.shields\.io/badge/version[^)]*)|[![Version]($VERSION_BADGE_URL)|g" README.md
              echo "Updated version badge"
              BADGES_CHANGED=true
            else
              echo "Version badge is already up to date"
            fi
          else
            echo "No version badge found in README to replace"
          fi
          
          # Check if README contains status badge and if it needs updating
          if grep -q "\[\!\[Status\]" README.md; then
            echo "Found status badge in README"
            
            # Extract current badge URL to check if status or color matches
            CURRENT_STATUS_BADGE=$(grep -o "\[\!\[Status\](https://img\.shields\.io/badge/status[^)]*)" README.md || echo "")
            
            # Check if the badge needs updating (different status or color)
            if [[ "$CURRENT_STATUS_BADGE" != *"$STATUS"* || "$CURRENT_STATUS_BADGE" != *"-$COLOR"* ]]; then
              sed -i "s|\[\!\[Status\](https://img\.shields\.io/badge/status[^)]*)|[![Status]($STATUS_BADGE_URL)|g" README.md
              echo "Updated status badge"
              BADGES_CHANGED=true
            else
              echo "Status badge is already up to date"
            fi
          else
            echo "No status badge found in README to replace"
          fi
          
          # Output whether badges were changed
          echo "badges-changed=$BADGES_CHANGED" >> $GITHUB_OUTPUT
        else
          echo "README.md not found, skipping badge update"
          echo "badges-changed=false" >> $GITHUB_OUTPUT
        fi
