name: 'Update Changelog'
description: 'Update CHANGELOG.md structure and content with new version information'
inputs:
  action:
    description: 'Action to perform on the changelog'
    required: true
    type: choice
    options:
      - create-release # Create a new release section from Unreleased content
      - add-line # Add a new line to a section in the Unreleased area
  version:
    description: 'Version to add to changelog (required for create-release action)'
    required: false
  date:
    description: 'Release date (defaults to today)'
    required: false
  section:
    description: 'Section to add the line to (required for add-line action)'
    required: false
    type: choice
    options:
      - Added
      - Changed
      - Deprecated
      - Removed
      - Fixed
      - Security
  description:
    description: 'Description to add as a new line (required for add-line action)'
    required: false
  issue-number:
    description: 'Issue number to reference in the new line (optional for add-line action)'
    required: false
  changelog-path:
    description: 'Path to CHANGELOG.md file'
    required: false
    default: 'CHANGELOG.md'

outputs:
  updated:
    description: 'Whether the changelog was updated'
    value: ${{ steps.update-changelog.outputs.updated }}
  unreleased-content:
    description: 'Content that was in the Unreleased section'
    value: ${{ steps.update-changelog.outputs.unreleased-content }}

runs:
  using: "composite"
  steps:
    - name: Update CHANGELOG.md
      id: update-changelog
      shell: bash
      run: |
        # Validate inputs based on action
        ACTION="${{ inputs.action }}"
        CHANGELOG_PATH="${{ inputs.changelog-path }}"
        
        if [[ ! -f "$CHANGELOG_PATH" ]]; then
          echo "Error: CHANGELOG.md file not found at $CHANGELOG_PATH"
          exit 1
        fi
        
        if [[ "$ACTION" == "create-release" ]]; then
          if [[ -z "${{ inputs.version }}" ]]; then
            echo "Error: version input is required for create-release action"
            exit 1
          fi
          
          VERSION="${{ inputs.version }}"
          
          # Set date (default to today if not provided)
          if [[ -z "${{ inputs.date }}" ]]; then
            DATE=$(date +%Y-%m-%d)
          else
            DATE="${{ inputs.date }}"
          fi
          
          echo "Creating release section for version $VERSION ($DATE)"
          
          # Extract Unreleased content
          UNRELEASED_CONTENT=$(sed -n '/## \[Unreleased\]/,/## \[/p' "$CHANGELOG_PATH" | sed '1d;$d')
          
          # Check if there's any content to move
          if [[ -z "$UNRELEASED_CONTENT" ]]; then
            echo "No unreleased content found to create a release"
            echo "updated=false" >> $GITHUB_OUTPUT
            echo "unreleased-content=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Escape special characters for GitHub output
          ESCAPED_CONTENT="${UNRELEASED_CONTENT//'%'/'%25'}"
          ESCAPED_CONTENT="${ESCAPED_CONTENT//$'\n'/'%0A'}"
          ESCAPED_CONTENT="${ESCAPED_CONTENT//$'\r'/'%0D'}"
          
          echo "unreleased-content=$ESCAPED_CONTENT" >> $GITHUB_OUTPUT
          
          # Create new release section
          if [[ "$VERSION" == "Unreleased" ]]; then
            # Special case: Re-create the Unreleased section
            sed -i '/## \[Unreleased\]/,/## \[/d' "$CHANGELOG_PATH"
            sed -i "s/# Changelog/# Changelog\n\n## [Unreleased]\n\n/" "$CHANGELOG_PATH"
          else
            # Normal case: Create a new version section
            sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [$VERSION] - $DATE/" "$CHANGELOG_PATH"
          fi
          
          echo "Release section created for version $VERSION"
          echo "updated=true" >> $GITHUB_OUTPUT
          
        elif [[ "$ACTION" == "add-line" ]]; then
          if [[ -z "${{ inputs.section }}" ]]; then
            echo "Error: section input is required for add-line action"
            exit 1
          fi
          
          if [[ -z "${{ inputs.description }}" ]]; then
            echo "Error: description input is required for add-line action"
            exit 1
          fi
          
          SECTION="${{ inputs.section }}"
          DESCRIPTION="${{ inputs.description }}"
          ISSUE_NUMBER="${{ inputs.issue-number }}"
          
          # Format the line with issue reference if provided
          if [[ -n "$ISSUE_NUMBER" ]]; then
            LINE="- $DESCRIPTION [#$ISSUE_NUMBER](https://github.com/architects-toolkit/SmartHopper/issues/$ISSUE_NUMBER)"
          else
            LINE="- $DESCRIPTION"
          fi
          
          echo "Adding line to $SECTION section: $LINE"
          
          # Check if Unreleased section exists
          if ! grep -q "## \[Unreleased\]" "$CHANGELOG_PATH"; then
            echo "Error: Unreleased section not found in CHANGELOG.md"
            exit 1
          fi
          
          # Check if the section exists in Unreleased
          SECTION_PATTERN="### $SECTION"
          UNRELEASED_CONTENT=$(sed -n '/## \[Unreleased\]/,/## \[/p' "$CHANGELOG_PATH")
          
          if echo "$UNRELEASED_CONTENT" | grep -q "$SECTION_PATTERN"; then
            # Section exists, append the line
            sed -i "/### $SECTION/a\\$LINE" "$CHANGELOG_PATH"
          else
            # Section doesn't exist, create it
            sed -i "/## \[Unreleased\]/a\\### $SECTION\n$LINE" "$CHANGELOG_PATH"
          fi
          
          echo "Line added to $SECTION section in Unreleased"
          echo "updated=true" >> $GITHUB_OUTPUT
          
        else
          echo "Error: Unknown action: $ACTION"
          exit 1
        fi
