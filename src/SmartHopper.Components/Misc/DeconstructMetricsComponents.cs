/*
 * SmartHopper - AI-powered Grasshopper Plugin
 * Copyright (C) 2024 Marc Roca Musach
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 */

using Grasshopper.Kernel;
using Newtonsoft.Json.Linq;
using System;

namespace SmartHopper.Components.Misc
{
    public class DeconstructMetricsComponent : GH_Component
    {
        public DeconstructMetricsComponent()
            : base("Deconstruct SmartHopper Metrics", "DMetrics",
                   "Deconstructs SmartHopper usage metrics into individual values",
                   "SmartHopper", "Utils")
        {
        }

        public override Guid ComponentGuid => new Guid("250D14BA-D96A-4DC0-8703-87468CE2A18D");

        protected override void RegisterInputParams(GH_InputParamManager pManager)
        {
            pManager.AddTextParameter("Metrics", "M", "SmartHopper usage metrics in JSON, generated by any AI-powered SmartHopper component", GH_ParamAccess.item);
        }

        protected override void RegisterOutputParams(GH_OutputParamManager pManager)
        {
            pManager.AddIntegerParameter("Input Tokens", "I", "Number of input tokens", GH_ParamAccess.item);
            pManager.AddIntegerParameter("Output Tokens", "O", "Number of output tokens", GH_ParamAccess.item);
            pManager.AddTextParameter("Finish Reason", "F", "Reason for finishing", GH_ParamAccess.item);
            pManager.AddNumberParameter("Completion Time", "T", "Time taken for completion, in seconds", GH_ParamAccess.item);
            pManager.AddIntegerParameter("Input Branches", "BI", "Number of input branches", GH_ParamAccess.item);
            pManager.AddIntegerParameter("Processed Branches", "BP", "Number of processed branches. This value can difer from input branches when the component detects that there are identical branch combinations.", GH_ParamAccess.item);

        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            string jsonMetrics = null;
            if (!DA.GetData(0, ref jsonMetrics)) return;

            try
            {
                var metricsObject = JObject.Parse(jsonMetrics);

                int inputTokens = metricsObject["tokens_input"]?.Value<int>() ?? 0;
                int outputTokens = metricsObject["tokens_output"]?.Value<int>() ?? 0;
                string finishReason = metricsObject["finish_reason"]?.Value<string>() ?? "Unknown";
                double completionTime = metricsObject["completion_time"]?.Value<double>() ?? 0.0;
                int branchesInput = metricsObject["branches_input"]?.Value<int>() ?? 0;
                int branchesProcessed = metricsObject["branches_processed"]?.Value<int>() ?? 0;


                // Checks to see if the values were actually present
                bool hasInputTokens = metricsObject["tokens_input"] != null;
                bool hasOutputTokens = metricsObject["tokens_output"] != null;
                bool hasFinishReason = metricsObject["finish_reason"] != null;
                bool hasCompletionTime = metricsObject["completion_time"] != null;

                // Set the data, potentially with warnings if values were missing
                DA.SetData(0, inputTokens);
                if (!hasInputTokens) AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Input tokens not found in JSON");

                DA.SetData(1, outputTokens);
                if (!hasOutputTokens) AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Output tokens not found in JSON");

                DA.SetData(2, finishReason);
                if (!hasFinishReason) AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Finish reason not found in JSON");

                DA.SetData(3, completionTime);
                if (!hasCompletionTime) AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "Completion time not found in JSON");

                DA.SetData(4, branchesInput);

                DA.SetData(5, branchesProcessed);
            }
            catch (Exception ex)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, $"Failed to parse JSON metrics: {ex.Message}");
            }
        }
    }
}
